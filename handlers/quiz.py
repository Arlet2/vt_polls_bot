from aiogram import Router, types, F
from aiogram.filters import Command

import config
from main import bot, mongo_connector

router = Router()

quiz_usage = """
–ö–æ–º–∞–Ω–¥–∞ /quiz –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ!\n
–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å –Ω–∞–ø–∏—à–∏—Ç–µ /quiz <—Ç–µ–º–∞ –æ–ø—Ä–æ—Å–∞>\n
–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –∫–≤–∏–∑–æ–º!\n
–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é üëç –Ω–∞ –æ—Ç–≤–µ—Ç"""


def create_poll_message(quiz: dict) -> str:
    return f"quiz: {quiz['name']}\n" + "\n".join([
        f"- {option['name']} " + "üëç" * int(option['value'])
        for option
        in sorted(quiz["options"], key=lambda option: option["value"], reverse=True)
    ])


def is_emoji_in_reaction(emoji: str, message_reactions):
    return emoji in map(lambda x: x.emoji, message_reactions)


@router.message(Command("quiz"))
async def quiz_creation(message: types.Message):
    if len(message.text) > config.quiz_theme_max_length:
        await message.reply(f"–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ {config.quiz_theme_max_length} —Å–∏–º–≤–æ–ª–æ–≤!")
        return
    quiz_name = message.text[len("/quiz"):].strip()
    if quiz_name == "":
        await message.reply(quiz_usage)
        return
    sent_message = await message.reply(create_poll_message({
        "name": quiz_name,
        "options": []
    }))
    await mongo_connector.create_quiz(message.chat.id, sent_message.message_id, quiz_name)
    await sent_message.pin()


@router.message(F.reply_to_message.text.startswith("quiz:"))
async def quiz_answer(message: types.Message):
    if len(message.text) > config.quiz_answer_max_length:
        await message.reply(f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—á–µ {config.quiz_answer_max_length} —Å–∏–º–≤–æ–ª–æ–≤!")
        return
    quiz_answer_text = message.text.strip().rstrip("üëç").rstrip()
    if quiz_answer_text == "":
        await message.reply("–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –ø—É—Å—Ç—ã–º")
        return
    quiz_message = message.reply_to_message
    if await mongo_connector.is_option_exists(quiz_message.chat.id, quiz_message.message_id, quiz_answer_text):
        await message.reply("–¢–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ —É–∂–µ –µ—Å—Ç—å!")
        return
    await mongo_connector.create_quiz_option(message.chat.id,
                                             quiz_message.message_id,
                                             quiz_answer_text,
                                             message.message_id)
    quiz = await mongo_connector.get_quiz_by_quiz_message_id(quiz_message.chat.id, quiz_message.message_id)
    await bot.edit_message_text(create_poll_message(quiz),
                                quiz_message.chat.id,
                                quiz_message.message_id)


@router.message_reaction(F.func(lambda msg: is_emoji_in_reaction("üëç", msg.new_reaction))
                         | F.func(lambda msg: is_emoji_in_reaction("üëç", msg.old_reaction)))
async def message_reaction_handler(message_reaction: types.MessageReactionUpdated):
    quiz = await mongo_connector.get_quiz_by_answer_message_id(message_reaction.chat.id, message_reaction.message_id)
    if not quiz:
        return
    if is_emoji_in_reaction("üëç", message_reaction.new_reaction):
        await mongo_connector.cast_vote(quiz["chat_id"],
                                        quiz["message_id"],
                                        message_reaction.message_id)
    elif is_emoji_in_reaction("üëç", message_reaction.old_reaction):
        await mongo_connector.retract_vote(quiz["chat_id"],
                                           quiz["message_id"],
                                           message_reaction.message_id)
    quiz = await mongo_connector.get_quiz_by_quiz_message_id(quiz["chat_id"],
                                                             quiz["message_id"])
    await bot.edit_message_text(create_poll_message(quiz),
                                quiz["chat_id"],
                                quiz["message_id"])
